//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Mouse&Keyboard"",
            ""id"": ""71660266-970b-437a-835a-bd65c60f5cc1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""30c6b79c-3607-4fec-be41-2e02a88065f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Plant1"",
                    ""type"": ""Value"",
                    ""id"": ""5c70d09d-7365-4e48-85df-c3483e95a7b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""4340ea5e-354b-4481-99d0-e4bed6ef3005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Plant2"",
                    ""type"": ""Value"",
                    ""id"": ""7f441274-aceb-4731-b878-6651f541431b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Plant3"",
                    ""type"": ""Value"",
                    ""id"": ""42892bf0-043c-4e6f-88a5-ccc14751028d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""aaafe060-79e4-418b-ac96-9627e475b694"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""30249d44-1029-4d86-b70a-a3d035f30d5a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b03d2d91-e784-4e48-8777-c62b4eac4fd5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d76f7bf1-1068-492a-8163-f194c2a2c82b"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plant1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02239e26-7572-44a5-a401-877ebe5387fc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plant2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c19fb31-c6a7-4e15-bd5e-2470ec46ba8d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plant3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dd1454b-e67e-4c94-bfbe-0dfe7be1d049"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse&Keyboard
        m_MouseKeyboard = asset.FindActionMap("Mouse&Keyboard", throwIfNotFound: true);
        m_MouseKeyboard_Move = m_MouseKeyboard.FindAction("Move", throwIfNotFound: true);

        m_MouseKeyboard_Pause = m_MouseKeyboard.FindAction("Pause", throwIfNotFound: true);

        m_MouseKeyboard_Plant1 = m_MouseKeyboard.FindAction("Plant1", throwIfNotFound: true);
        m_MouseKeyboard_Plant2 = m_MouseKeyboard.FindAction("Plant2", throwIfNotFound: true);
        m_MouseKeyboard_Plant3 = m_MouseKeyboard.FindAction("Plant3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse&Keyboard
    private readonly InputActionMap m_MouseKeyboard;
    private List<IMouseKeyboardActions> m_MouseKeyboardActionsCallbackInterfaces = new List<IMouseKeyboardActions>();
    private readonly InputAction m_MouseKeyboard_Move;

    private readonly InputAction m_MouseKeyboard_Pause;

    private readonly InputAction m_MouseKeyboard_Plant1;
    private readonly InputAction m_MouseKeyboard_Plant2;
    private readonly InputAction m_MouseKeyboard_Plant3;

    public struct MouseKeyboardActions
    {
        private @PlayerInput m_Wrapper;
        public MouseKeyboardActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MouseKeyboard_Move;

        public InputAction @Pause => m_Wrapper.m_MouseKeyboard_Pause;

        public InputAction @Plant1 => m_Wrapper.m_MouseKeyboard_Plant1;
        public InputAction @Plant2 => m_Wrapper.m_MouseKeyboard_Plant2;
        public InputAction @Plant3 => m_Wrapper.m_MouseKeyboard_Plant3;

        public InputActionMap Get() { return m_Wrapper.m_MouseKeyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseKeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IMouseKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseKeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseKeyboardActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;

            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;

            @Plant1.started += instance.OnPlant1;
            @Plant1.performed += instance.OnPlant1;
            @Plant1.canceled += instance.OnPlant1;
            @Plant2.started += instance.OnPlant2;
            @Plant2.performed += instance.OnPlant2;
            @Plant2.canceled += instance.OnPlant2;
            @Plant3.started += instance.OnPlant3;
            @Plant3.performed += instance.OnPlant3;
            @Plant3.canceled += instance.OnPlant3;
        }

        private void UnregisterCallbacks(IMouseKeyboardActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;

            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;

            @Plant1.started -= instance.OnPlant1;
            @Plant1.performed -= instance.OnPlant1;
            @Plant1.canceled -= instance.OnPlant1;
            @Plant2.started -= instance.OnPlant2;
            @Plant2.performed -= instance.OnPlant2;
            @Plant2.canceled -= instance.OnPlant2;
            @Plant3.started -= instance.OnPlant3;
            @Plant3.performed -= instance.OnPlant3;
            @Plant3.canceled -= instance.OnPlant3;

        }

        public void RemoveCallbacks(IMouseKeyboardActions instance)
        {
            if (m_Wrapper.m_MouseKeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseKeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseKeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseKeyboardActions @MouseKeyboard => new MouseKeyboardActions(this);
    public interface IMouseKeyboardActions
    {
        void OnMove(InputAction.CallbackContext context);

        void OnPause(InputAction.CallbackContext context);

        void OnPlant1(InputAction.CallbackContext context);
        void OnPlant2(InputAction.CallbackContext context);
        void OnPlant3(InputAction.CallbackContext context);

    }
}
